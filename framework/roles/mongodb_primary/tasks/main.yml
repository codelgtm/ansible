---

- name: Print deployment type for {{ app }} {{ ansible_fqdn }} {{ ansible_default_ipv4.address }}
  debug: 
    msg: "Performing {{ app }}-{{ deploy_type }} primary replica set deployment on host {{ ansible_default_ipv4.address }}"

- name: Construct node name
  vars:
    nodename: "mongoNode"
  set_fact:
    nodename: "{{ nodename }}"
    nodex: "{{ nodename }}{{ groups['cicd_mongodb_primary'].index(inventory_hostname) + 1 }}"

- name: Construct docker run --add-host info
  vars:
    addhost: "--add-host {{ ansible_fqdn }}:{{ ansible_default_ipv4.address }}"
  set_fact:
    addhost: "{{ addhost }} --add-host {{ hostvars[item]['ansible_fqdn'] }}:{{ item }}"
  loop: "{{ groups['cicd_mongodb_secondary'] }}"

- name: Ensure {{ work_dir }} directory exists
  file:
    path: "{{ work_dir }}"
    state: directory
    mode: 0777

- name: Create docker volumes for MongoDB artifacts
  shell: |
    docker volume create {{ vol_db }}
    docker volume create {{ vol_configdb }}
    docker volume create {{ vol_etc }}

- name: Initialize MongoDB primary node
  shell: >
    docker run --name {{ nodex }} --hostname {{ ansible_fqdn }}
    -v {{ vol_db }}:/data/db
    -v {{ vol_configdb }}:/data/configdb
    -v {{ vol_etc }}:/mongo
    {{ addhost }}
    -p {{ mongo_port }}:{{ mongo_port }}
    -d mongo:{{ version }}

- name: Create additional keyfile admin tls folders
  shell: docker exec {{ nodex }} bash -c 'mkdir {{ dir_keyfile }} {{ dir_admin }} {{ dir_tls }}'

- name: (For dev) Generate root CA certificate
  shell: > 
    openssl req -nodes -out {{ work_dir }}/ca.pem -new -x509
    -keyout {{ work_dir }}/ca.key
    -subj '/C=US/ST=RTP/L=RTP/O=Global Security/OU=IBM Department/CN=rootcacert'
  when: deploy_type == "development"

- name: (For dev) Generate CSR for primary node and sign it with root CA cert before concatenating the node cert with its key
  shell: |
    openssl req -nodes -newkey rsa:4096 -sha256 -keyout {{ work_dir }}/{{ nodex }}.key -out {{ work_dir }}/{{ nodex }}.csr -subj '/C=US/ST=RTP/L=RTP/O=Global Security/OU=IBM Department/CN={{ ansible_fqdn }}'
    openssl x509 -req -in {{ work_dir }}/{{ nodex }}.csr -CA {{ work_dir }}/ca.pem -CAkey {{ work_dir }}/ca.key -set_serial 00 -out {{ work_dir }}/{{ nodex }}.crt
    cat {{ work_dir }}/{{ nodex }}.key {{ work_dir }}/{{ nodex }}.crt > {{ work_dir }}/{{ nodex }}.pem
  when: deploy_type == "development"

- name: (For dev) Generate CSR for each secondary node and sign it with root CA cert before concatenating the node cert with its key
  shell: |
    openssl req -nodes -newkey rsa:4096 -sha256 -keyout {{ work_dir }}/{{ nodename }}{{ ansible_loop.index + 1 }}.key -out {{ work_dir }}/{{ nodename }}{{ ansible_loop.index + 1 }}.csr -subj '/C=US/ST=RTP/L=RTP/O=Global Security/OU=IBM Department/CN={{ hostvars[item]['ansible_fqdn'] }}'
    openssl x509 -req -in {{ work_dir }}/{{ nodename }}{{ ansible_loop.index + 1 }}.csr -CA {{ work_dir }}/ca.pem -CAkey {{ work_dir }}/ca.key -set_serial 00 -out {{ work_dir }}/{{ nodename }}{{ ansible_loop.index + 1 }}.crt
    cat {{ work_dir }}/{{ nodename }}{{ ansible_loop.index + 1 }}.key {{ work_dir }}/{{ nodename }}{{ ansible_loop.index + 1 }}.crt > {{ work_dir }}/{{ nodename }}{{ ansible_loop.index + 1 }}.pem
  loop: "{{ groups['cicd_mongodb_secondary'] }}"
  loop_control:
    extended: yes
  when: deploy_type == "development"

- name: (For dev) Copy certificates to {{ dir_tls }} folder inside container
  shell: |
    docker cp {{ work_dir }}/ca.pem {{ nodex }}:{{ dir_tls }}
    docker cp {{ work_dir }}/{{ nodex }}.pem {{ nodex }}:{{ dir_tls }}
  when: deploy_type == "development"

- name: (For dev) Consolidate certificate files for storing in ansible host to be used by secondary node deployment
  shell: find {{ work_dir }} -maxdepth 1 -type f | grep .pem
  register: dev_certs
  when: deploy_type == "development"

- name: (For dev) Store the consolidated certificate files from previous step
  fetch: 
    src: "{{ item }}"
    dest: "/framework_temp/dev_certs/"
    flat: yes
  with_items: "{{ dev_certs.stdout_lines }}"
  when: deploy_type == "development"

- name: (For prod) Save {{ app }} tls CA certificate
  copy:
    content: "{{ lookup('file', '/framework_temp/{{ tls_ca_cert_filepath }}') }}"
    dest: "{{ work_dir }}/{{ tls_ca_cert_filepath }}"
    mode: 0644
  when: deploy_type == "production"
  
- name: (For prod) Save {{ app }} tls node certificate
  copy:
    src: "{{ item }}"
    dest: "{{ work_dir }}"
    mode: 0644
  with_fileglob:
    - "/framework_temp/{{ nodename }}*.pem"
  when: deploy_type == "production"
  
- name: (For prod) Copy certificates to {{ dir_tls }} folder inside container
  shell: |
    docker cp {{ work_dir }}/{{ tls_ca_cert_filepath }} {{ nodex }}:{{ dir_tls }}
    for f in {{ work_dir }}/{{ nodename }}*.pem; do docker cp $f {{ nodex }}:{{ dir_tls }}; done
  when: deploy_type == "production"

- name: Export admin.js to {{ work_dir }}
  template:
    src: "files/admin.js"
    dest: "{{ work_dir }}/admin.js"
    mode: 0644

- name: Export replica.js to {{ work_dir }}
  template:
    src: "files/replica.js"
    dest: "{{ work_dir }}/replica.js"
    mode: 0644

- name: Export {{ keyfile }} to {{ work_dir }}
  template:
    src: "/framework_temp/{{ keyfile }}"
    dest: "{{ work_dir }}/{{ keyfile }}"
    mode: 0644

- name: Copy config files to mounted container folders and change ownership/permission
  shell: |
    docker cp {{ work_dir }}/admin.js {{ nodex }}:{{ dir_admin }}
    docker cp {{ work_dir }}/replica.js {{ nodex }}:{{ dir_admin }}
    docker cp {{ work_dir }}/{{ keyfile }} {{ nodex }}:{{ dir_keyfile }}
    docker exec {{ nodex }} bash -c 'chmod -R 700 {{ dir_tls }} {{ dir_keyfile }}'
    docker exec {{ nodex }} bash -c 'chown -R mongodb:mongodb /mongo'

- name: Remove {{ nodex }} container
  shell: docker rm -f {{ nodex }}

- name: Initialize MongoDB primary node with TLS enabled
  shell: >
    docker run --name {{ nodex }} --hostname {{ ansible_fqdn }}
    --restart always
    -v {{ vol_db }}:/data/db
    -v {{ vol_configdb }}:/data/configdb
    -v {{ vol_etc }}:/mongo
    {{ addhost }}
    -p {{ mongo_port }}:{{ mongo_port }}
    -d mongo:{{ version }}
    --keyFile {{ dir_keyfile }}/{{ keyfile }}
    --replSet {{ replica_set }}
    --storageEngine wiredTiger
    --port {{ mongo_port }}
    --tlsMode preferTLS
    --tlsCertificateKeyFile {{ dir_tls }}/{{ nodex }}.pem

- name: Initiate replica set and new users config
  shell: |
    docker exec {{ nodex }} bash -c 'mongo < {{ dir_admin }}/replica.js'
    docker exec {{ nodex }} bash -c 'mongo < {{ dir_admin }}/admin.js'

- name: Print {{ app }} application host access
  debug:
    msg: "Access MongoDB at mongodb://{{ ansible_fqdn }}:{{ mongo_port }}"
