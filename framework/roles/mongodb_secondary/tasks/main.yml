---

- name: Print deployment type for {{ app }} {{ ansible_fqdn }} {{ ansible_default_ipv4.address }}
  debug: 
    msg: "Performing {{ app }}-{{ deploy_type }} secondary replica set deployment on host {{ ansible_default_ipv4.address }}"

- name: Construct node name
  vars:
    nodename: "mongoNode"
  set_fact:
    nodename: "{{ nodename }}"
    nodex: "{{ nodename }}{{ groups['cicd_mongodb_secondary'].index(inventory_hostname) + 2 }}"

- name: Construct docker run --add-host info
  vars:
    addhost: "--add-host {{ hostvars[groups['cicd_mongodb_primary'][0]]['ansible_fqdn'] }}:{{ groups['cicd_mongodb_primary'][0] }}"
  set_fact:
    addhost: "{{ addhost }} --add-host {{ hostvars[item]['ansible_fqdn'] }}:{{ item }}"
  loop: "{{ groups['cicd_mongodb_secondary'] }}"
  run_once: true

- name: Ensure {{ work_dir }} directory exists
  file:
    path: "{{ work_dir }}"
    state: directory
    mode: 0777

- name: Create docker volumes for MongoDB artifacts
  shell: |
    docker volume create {{ vol_db }}
    docker volume create {{ vol_configdb }}
    docker volume create {{ vol_etc }}

- name: Initialize MongoDB secondary node
  shell: >
    docker run --name {{ nodex }} --hostname {{ ansible_fqdn }}
    -v {{ vol_db }}:/data/db
    -v {{ vol_configdb }}:/data/configdb
    -v {{ vol_etc }}:/mongo
    {{ addhost }}
    -p {{ mongo_port }}:{{ mongo_port }}
    -d mongo:{{ version }}

- name: Create additional keyfile admin tls folders
  shell: docker exec {{ nodex }} bash -c 'mkdir {{ dir_keyfile }} {{ dir_admin }} {{ dir_tls }}'

- name: (For dev) Transfer CA certificate to secondary host
  copy:
    src: "/framework_temp/dev_certs/ca.pem"
    dest: "{{ work_dir }}"
    mode: 0644
  when: deploy_type == "development"

- name: (For dev) Transfer node certificate to secondary host
  copy:
    src: "/framework_temp/dev_certs/{{ nodex }}.pem"
    dest: "{{ work_dir }}"
    mode: 0644
  when: deploy_type == "development"

- name: (For dev) Copy CA and node certificate to {{ dir_tls }} folder inside container
  shell: |
    docker cp {{ work_dir }}/ca.pem {{ nodex }}:{{ dir_tls }}
    docker cp {{ work_dir }}/{{ nodex }}.pem {{ nodex }}:{{ dir_tls }}
  when: deploy_type == "development"

- name: (For prod) Save {{ app }} tls CA certificate
  copy:
    src: "/framework_temp/{{ tls_ca_cert_filepath }}"
    dest: "{{ work_dir }}"
    mode: 0644
  when: deploy_type == "production"
  
- name: (For prod) Save {{ app }} tls node certificate
  copy:
    src: "/framework_temp/{{ nodex }}.pem"
    dest: "{{ work_dir }}"
    mode: 0644
  when: deploy_type == "production"
  
- name: (For prod) Copy CA and node certificate to {{ dir_tls }} folder inside container
  shell: |
    docker cp {{ work_dir }}/{{ tls_ca_cert_filepath }} {{ nodex }}:{{ dir_tls }} 
    docker cp {{ work_dir }}/{{ nodex }}.pem {{ nodex }}:{{ dir_tls }}
  when: deploy_type == "production"

- name: Export {{ keyfile }} to {{ work_dir }}
  template:
    src: "/framework_temp/{{ keyfile }}"
    dest: "{{ work_dir }}/{{ keyfile }}"
    mode: 0644

- name: Copy config files to mounted container folders and change ownership/permission
  shell: |
    docker cp {{ work_dir }}/{{ keyfile }} {{ nodex }}:{{ dir_keyfile }}
    docker exec {{ nodex }} bash -c 'chmod -R 700 {{ dir_tls }} {{ dir_keyfile }}'
    docker exec {{ nodex }} bash -c 'chown -R mongodb:mongodb /mongo'

- name: Remove node container
  shell: docker rm -f {{ nodex }}

- name: Initialize MongoDB secondary node with TLS enabled
  shell: >
    docker run --name {{ nodex }} --hostname {{ ansible_fqdn }}
    --restart always
    -v {{ vol_db }}:/data/db
    -v {{ vol_configdb }}:/data/configdb
    -v {{ vol_etc }}:/mongo
    {{ addhost }}
    -p {{ mongo_port }}:{{ mongo_port }}
    -d mongo:{{ version }}
    --keyFile {{ dir_keyfile }}/{{ keyfile }}
    --replSet {{ replica_set }}
    --storageEngine wiredTiger
    --port {{ mongo_port }}
    --tlsMode preferTLS
    --tlsCertificateKeyFile {{ dir_tls }}/{{ nodex }}.pem

- name: Add secondary node as members of the {{ replica_set }} replica set
  throttle: 1
  shell:
    docker exec {{ nodex }} bash -c 'mongo -u {{ replica_admin_user }} -p {{ replica_admin_user }} --host {{ hostvars[groups['cicd_mongodb_primary'][0]]['ansible_fqdn'] }}:{{ mongo_port }} --eval "rs.add(\"{{ ansible_fqdn }}:{{ mongo_port }}\")"'

- name: Change priority 0.5 if secondary node is {{ nodename }}2
  shell:
    docker exec {{ nodex }} bash -c 'mongo -u {{ replica_admin_user }} -p {{ replica_admin_user }} --host {{ hostvars[groups['cicd_mongodb_primary'][0]]['ansible_fqdn'] }}:{{ mongo_port }} --eval "cfg\=rs.conf();cfg.members[1].priority\=0.5;rs.reconfig(cfg)"'
  when: hostvars[inventory_hostname]['nodex'] == hostvars[inventory_hostname]['nodename'] + "2"

- name: Change priority 0.3 if secondary node is {{ nodename }}3
  shell:
    docker exec {{ nodex }} bash -c 'mongo -u {{ replica_admin_user }} -p {{ replica_admin_user }} --host {{ hostvars[groups['cicd_mongodb_primary'][0]]['ansible_fqdn'] }}:{{ mongo_port }} --eval "cfg\=rs.conf();cfg.members[2].priority\=0.3;rs.reconfig(cfg)"'
  when: hostvars[inventory_hostname]['nodex'] == hostvars[inventory_hostname]['nodename'] + "3"

- name: Change priority 0 and hidden true if secondary node is {{ nodename }}4 or {{ nodename }}5
  throttle: 1
  shell:
    docker exec {{ nodex }} bash -c 'mongo -u {{ replica_admin_user }} -p {{ replica_admin_user }} --host {{ hostvars[groups['cicd_mongodb_primary'][0]]['ansible_fqdn'] }}:{{ mongo_port }} --eval "cfg\=rs.conf();cfg.members[{{ groups['cicd_mongodb_secondary'].index(inventory_hostname) + 1 }}].priority\=0;cfg.members[{{ groups['cicd_mongodb_secondary'].index(inventory_hostname) + 1 }}].hidden\=true;rs.reconfig(cfg)"'
  when: (hostvars[inventory_hostname]['nodex'] == hostvars[inventory_hostname]['nodename'] + "4") or (hostvars[inventory_hostname]['nodex'] == hostvars[inventory_hostname]['nodename'] + "5")
  
- name: (For dev) Enforce requiredTLS for secondary node
  throttle: 1
  shell:
    docker exec {{ nodex }} bash -c 'mongo -u {{ replica_admin_user }} -p {{ replica_admin_user }} --tls --tlsCAFile {{ dir_tls }}/ca.pem --host {{ hostvars[groups['cicd_mongodb_primary'][0]]['ansible_fqdn'] }}:{{ mongo_port }} --eval "db.adminCommand({setParameter:1,tlsMode:\"requireTLS\"})"'
  when: deploy_type == "development"

- name: (For dev) Enforce requiredTLS for primary node
  shell:
    docker exec {{ nodex }} bash -c 'mongo -u {{ replica_admin_user }} -p {{ replica_admin_user }} --tls --tlsCAFile {{ dir_tls }}/ca.pem --host {{ hostvars[groups['cicd_mongodb_primary'][0]]['ansible_fqdn'] }}:{{ mongo_port }} --eval "db.adminCommand({setParameter:1,tlsMode:\"requireTLS\"})"'
  when: deploy_type == "development"

- name: (For prod) Enforce requiredTLS for secondary node
  throttle: 1
  shell:
    docker exec {{ nodex }} bash -c 'mongo -u {{ replica_admin_user }} -p {{ replica_admin_user }} --tls --tlsCAFile {{ dir_tls }}/{{ tls_ca_cert_filepath }} --host {{ hostvars[groups['cicd_mongodb_primary'][0]]['ansible_fqdn'] }}:{{ mongo_port }} --eval "db.adminCommand({setParameter:1,tlsMode:\"requireTLS\"})"'
  when: deploy_type == "production"

- name: (For prod) Enforce requiredTLS for primary node
  shell:
    docker exec {{ nodex }} bash -c 'mongo -u {{ replica_admin_user }} -p {{ replica_admin_user }} --tls --tlsCAFile {{ dir_tls }}/{{ tls_ca_cert_filepath }} --host {{ hostvars[groups['cicd_mongodb_primary'][0]]['ansible_fqdn'] }}:{{ mongo_port }} --eval "db.adminCommand({setParameter:1,tlsMode:\"requireTLS\"})"'
  when: deploy_type == "production"

- name: Print {{ app }} application host access
  debug:
    msg: "Access MongoDB at mongodb://{{ ansible_fqdn }}:{{ mongo_port }}"